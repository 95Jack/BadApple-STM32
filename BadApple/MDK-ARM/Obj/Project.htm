<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Fri Oct 14 17:04:11 2016
<BR><P>
<H3>Maximum Stack Usage =        520 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
BadApple_Start &rArr; BadApple_BeforeEvents &rArr; VcanLcd_ShowBMP &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6c]">BadApple_Init</a> from badapple.o(i.BadApple_Init) referenced from badapple.o(.data)
 <LI><a href="#[6d]">BadApple_Start</a> from badapple.o(i.BadApple_Start) referenced from badapple.o(.data)
 <LI><a href="#[51]">BoolToString</a> from cstring.o(i.BoolToString) referenced from cstring.o(.data)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">CStringCatInt</a> from cstring.o(i.CStringCatInt) referenced from cstring.o(.data)
 <LI><a href="#[53]">CStringConnact</a> from cstring.o(i.CStringConnact) referenced from cstring.o(.data)
 <LI><a href="#[54]">CStringConnact3</a> from cstring.o(i.CStringConnact3) referenced from cstring.o(.data)
 <LI><a href="#[5d]">CStringContainsSubString</a> from cstring.o(i.CStringContainsSubString) referenced from cstring.o(.data)
 <LI><a href="#[59]">CStringInsertRange</a> from cstring.o(i.CStringInsertRange) referenced from cstring.o(.data)
 <LI><a href="#[52]">CStringLenth</a> from cstring.o(i.CStringLenth) referenced from cstring.o(.data)
 <LI><a href="#[56]">CStringLetterCount</a> from cstring.o(i.CStringLetterCount) referenced from cstring.o(.data)
 <LI><a href="#[5a]">CStringRemoveRange</a> from cstring.o(i.CStringRemoveRange) referenced from cstring.o(.data)
 <LI><a href="#[5c]">CStringReplaceSubString</a> from cstring.o(i.CStringReplaceSubString) referenced from cstring.o(.data)
 <LI><a href="#[5b]">CStringReserse</a> from cstring.o(i.CStringReserse) referenced from cstring.o(.data)
 <LI><a href="#[57]">CStringSubStringIndex</a> from cstring.o(i.CStringSubStringIndex) referenced from cstring.o(.data)
 <LI><a href="#[58]">CStringSubStringLastIndex</a> from cstring.o(i.CStringSubStringLastIndex) referenced from cstring.o(.data)
 <LI><a href="#[5f]">CStringToLower</a> from cstring.o(i.CStringToLower) referenced from cstring.o(.data)
 <LI><a href="#[5e]">CStringToUpper</a> from cstring.o(i.CStringToUpper) referenced from cstring.o(.data)
 <LI><a href="#[49]">ColorFromARGB</a> from color.o(i.ColorFromARGB) referenced from color.o(i.ColorInit)
 <LI><a href="#[4c]">ColorFromGrayValue</a> from color.o(i.ColorFromGrayValue) referenced from color.o(i.ColorInit)
 <LI><a href="#[4b]">ColorFromRBG565Value</a> from color.o(i.ColorFromRBG565Value) referenced from color.o(i.ColorInit)
 <LI><a href="#[4a]">ColorFromRGB24Value</a> from color.o(i.ColorFromRGB24Value) referenced from color.o(i.ColorInit)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">FloatToString</a> from cstring.o(i.FloatToString) referenced from cstring.o(.data)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">IntToHexString</a> from cstring.o(i.IntToHexString) referenced from cstring.o(.data)
 <LI><a href="#[4e]">IntToString</a> from cstring.o(i.IntToString) referenced from cstring.o(.data)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">VcanLCD_Clear</a> from vcanlcdforstm32.o(i.VcanLCD_Clear) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[6a]">VcanLCD_DrawBinaryImage</a> from vcanlcdforstm32.o(i.VcanLCD_DrawBinaryImage) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[69]">VcanLCD_DrawCircle</a> from vcanlcdforstm32.o(i.VcanLCD_DrawCircle) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[66]">VcanLCD_DrawLine</a> from vcanlcdforstm32.o(i.VcanLCD_DrawLine) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[67]">VcanLCD_DrawPenRectangle</a> from vcanlcdforstm32.o(i.VcanLCD_DrawPenRectangle) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[65]">VcanLCD_DrawPoint</a> from vcanlcdforstm32.o(i.VcanLCD_DrawPoint) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[68]">VcanLCD_DrawRectangleWithColor_t</a> from vcanlcdforstm32.o(i.VcanLCD_DrawRectangleWithColor_t) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[60]">VcanLCD_Init</a> from vcanlcdforstm32.o(i.VcanLCD_Init) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[63]">VcanLCD_ShowFloat</a> from vcanlcdforstm32.o(i.VcanLCD_ShowFloat) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[62]">VcanLCD_ShowInt</a> from vcanlcdforstm32.o(i.VcanLCD_ShowInt) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[61]">VcanLCD_ShowMuxString</a> from hzk16.o(i.VcanLCD_ShowMuxString) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[6b]">VcanLcd_ShowBMP</a> from image_bmp.o(i.VcanLcd_ShowBMP) referenced from vcanlcdforstm32.o(.data)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4d]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[fa]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexString
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexString
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToString
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringToUpper
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringToLower
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReserse
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReplaceSubString
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringRemoveRange
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringInsertRange
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringConnact3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringConnact
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringCatInt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoolToString
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[95]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReplaceSubString
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringRemoveRange
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringConnact3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringConnact
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringCatInt
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowFloat
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToString
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[102]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[103]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[76]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[105]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[106]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>All_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, init.o(i.All_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = All_Init &rArr; TIM2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcdKeyInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>BadApple_AfterEvents</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, badapple.o(i.BadApple_AfterEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BadApple_AfterEvents &rArr; VcanLCD_Clear &rArr; VcanLCD_DrawRectangle &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
</UL>

<P><STRONG><a name="[87]"></a>BadApple_BeforeEvents</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, badapple.o(i.BadApple_BeforeEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = BadApple_BeforeEvents &rArr; VcanLcd_ShowBMP &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
</UL>

<P><STRONG><a name="[6c]"></a>BadApple_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, badapple.o(i.BadApple_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = BadApple_Init &rArr; initMicroSD &rArr; VcanLCD_ShowChineseString &rArr; VcanLCD_DrawChineseString &rArr; GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> badapple.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>BadApple_Start</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, badapple.o(i.BadApple_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = BadApple_Start &rArr; BadApple_BeforeEvents &rArr; VcanLcd_ShowBMP &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_BeforeEvents
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_AfterEvents
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChineseString
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRowDrawBMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> badapple.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>BoolToString</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cstring.o(i.BoolToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BoolToString
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>CStringAlignToLeft</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, cstring.o(i.CStringAlignToLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CStringAlignToLeft &rArr; CStringLetterLastIndexOf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLetterLastIndexOf
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowFloat
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToString
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToHexString
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToString
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringCatInt
</UL>

<P><STRONG><a name="[55]"></a>CStringCatInt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, cstring.o(i.CStringCatInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CStringCatInt &rArr; CStringAlignToLeft &rArr; CStringLetterLastIndexOf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>CStringConnact</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, cstring.o(i.CStringConnact))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CStringConnact
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>CStringConnact3</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cstring.o(i.CStringConnact3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CStringConnact3
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>CStringContainsSubString</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, cstring.o(i.CStringContainsSubString))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CStringContainsSubString &rArr; CStringSubString
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringSubString
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReplaceSubString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>CStringInsertRange</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, cstring.o(i.CStringInsertRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CStringInsertRange
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>CStringLenth</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cstring.o(i.CStringLenth))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringToUpper
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringToLower
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringSubStringLastIndex
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReserse
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReplaceSubString
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringRemoveRange
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringInsertRange
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringConnact3
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringConnact
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringCatInt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>CStringLetterCount</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cstring.o(i.CStringLetterCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CStringLetterCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>CStringLetterLastIndexOf</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, cstring.o(i.CStringLetterLastIndexOf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CStringLetterLastIndexOf
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
</UL>

<P><STRONG><a name="[5a]"></a>CStringRemoveRange</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, cstring.o(i.CStringRemoveRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CStringRemoveRange
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>CStringReplaceSubString</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, cstring.o(i.CStringReplaceSubString))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CStringReplaceSubString &rArr; CStringContainsSubString &rArr; CStringSubString
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringSubStringIndex
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringContainsSubString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>CStringReserse</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cstring.o(i.CStringReserse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CStringReserse
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>CStringSubString</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cstring.o(i.CStringSubString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CStringSubString
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringContainsSubString
</UL>

<P><STRONG><a name="[57]"></a>CStringSubStringIndex</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cstring.o(i.CStringSubStringIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CStringSubStringIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringReplaceSubString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>CStringSubStringLastIndex</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, cstring.o(i.CStringSubStringLastIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CStringSubStringLastIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>CStringToLower</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cstring.o(i.CStringToLower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CStringToLower
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>CStringToUpper</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, cstring.o(i.CStringToUpper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CStringToUpper
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringLenth
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>ColorFromARGB</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, color.o(i.ColorFromARGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ColorFromARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorFromRGB24Value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color.o(i.ColorInit)
</UL>
<P><STRONG><a name="[4c]"></a>ColorFromGrayValue</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, color.o(i.ColorFromGrayValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ColorFromGrayValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color.o(i.ColorInit)
</UL>
<P><STRONG><a name="[4b]"></a>ColorFromRBG565Value</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, color.o(i.ColorFromRBG565Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ColorFromRBG565Value
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color.o(i.ColorInit)
</UL>
<P><STRONG><a name="[4a]"></a>ColorFromRGB24Value</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, color.o(i.ColorFromRGB24Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ColorFromRGB24Value &rArr; ColorFromARGB
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorFromARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> color.o(i.ColorInit)
</UL>
<P><STRONG><a name="[97]"></a>ColorInit</STRONG> (Thumb, 374 bytes, Stack size 12 bytes, color.o(i.ColorInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ColorInit &rArr; ColorFromRGB24Value &rArr; ColorFromARGB
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorFromRGB24Value
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorFromRBG565Value
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorFromARGB
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Init
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FloatToString</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cstring.o(i.FloatToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FloatToString &rArr; CStringAlignToLeft &rArr; CStringLetterLastIndexOf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcdKeyInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Configuration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_GpioInit
</UL>

<P><STRONG><a name="[bb]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanKeyIRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command_hold
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_buffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteSingleBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteMultiBlock
</UL>

<P><STRONG><a name="[a4]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_buffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Configuration
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteSingleBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteMultiBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadMultiBlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>

<P><STRONG><a name="[99]"></a>GetGBKCodeFromSD</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hzk16.o(i.GetGBKCodeFromSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawMuxString
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawChineseString
</UL>

<P><STRONG><a name="[c7]"></a>GetVcanLCDSize</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, vcanlcdforstm32.o(i.GetVcanLCDSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetVcanLCDSize
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Init
</UL>

<P><STRONG><a name="[c8]"></a>GetZeroPoint</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, vcanlcdforstm32.o(i.GetZeroPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetZeroPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IntToHexString</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, cstring.o(i.IntToHexString))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = IntToHexString &rArr; CStringAlignToLeft &rArr; CStringLetterLastIndexOf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>IntToString</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cstring.o(i.IntToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IntToString &rArr; CStringAlignToLeft &rArr; CStringLetterLastIndexOf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cstring.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LED_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[9e]"></a>MSD_GetCardInfo</STRONG> (Thumb, 830 bytes, Stack size 56 bytes, stm32f10x_microsd.o(i.MSD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MSD_GetCardInfo &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[a1]"></a>MSD_Init</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, stm32f10x_microsd.o(i.MSD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSD_Init &rArr; MSD_SPIHighSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command_hold
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPIHighSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>

<P><STRONG><a name="[a6]"></a>MSD_ReadMultiBlock</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_microsd.o(i.MSD_ReadMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSD_ReadMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[a7]"></a>MSD_ReadSingleBlock</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_microsd.o(i.MSD_ReadSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSD_ReadSingleBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[a5]"></a>MSD_SPIHighSpeed</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32f10x_microsd.o(i.MSD_SPIHighSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MSD_SPIHighSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Configuration
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>

<P><STRONG><a name="[a9]"></a>MSD_SPI_Configuration</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f10x_microsd.o(i.MSD_SPI_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MSD_SPI_Configuration &rArr; MSD_SPIHighSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPIHighSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
</UL>

<P><STRONG><a name="[ab]"></a>MSD_WriteMultiBlock</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, stm32f10x_microsd.o(i.MSD_WriteMultiBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[ad]"></a>MSD_WriteSingleBlock</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32f10x_microsd.o(i.MSD_WriteSingleBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MSD_WriteSingleBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>MyRowDrawBMP</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, vcanlcdforstm32.o(i.MyRowDrawBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MyRowDrawBMP &rArr; VcanLCD_DrawBinaryImage &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawBinaryImage
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
</UL>

<P><STRONG><a name="[b2]"></a>MyTimerLEDToggle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, led.o(i.MyTimerLEDToggle))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[8e]"></a>NewPoint</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vcanlcdforstm32.o(i.NewPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NewPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowMuxString
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowString
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowFloat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChineseString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawLine
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRowDrawBMP
</UL>

<P><STRONG><a name="[c3]"></a>NewPointFromSize</STRONG> (Thumb, 38 bytes, Stack size 28 bytes, vcanlcdforstm32.o(i.NewPointFromSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NewPointFromSize
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawPenRectangle
</UL>

<P><STRONG><a name="[8d]"></a>NewSize</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vcanlcdforstm32.o(i.NewSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NewSize
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawLine
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRowDrawBMP
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[9c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcdKeyInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Configuration
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_GpioInit
</UL>

<P><STRONG><a name="[aa]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Configuration
</UL>

<P><STRONG><a name="[d4]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
</UL>

<P><STRONG><a name="[d6]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
</UL>

<P><STRONG><a name="[d5]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
</UL>

<P><STRONG><a name="[a8]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPIHighSpeed
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; VcanKeyIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanKeyIRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimerLEDToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>TIM2_Init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tim.o(i.TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[b0]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanKeyIRQHandler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_AfterEvents
</UL>

<P><STRONG><a name="[b5]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[b4]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>VcanKeyIRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vcanlcdkey.o(i.VcanKeyIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VcanKeyIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>VcanLCD_Clear</STRONG> (Thumb, 36 bytes, Stack size 28 bytes, vcanlcdforstm32.o(i.VcanLCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VcanLCD_Clear &rArr; VcanLCD_DrawRectangle &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_GetSize
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_BeforeEvents
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_AfterEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>VcanLCD_DrawBinaryImage</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawBinaryImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VcanLCD_DrawBinaryImage &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRowDrawBMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>VcanLCD_DrawChineseString</STRONG> (Thumb, 714 bytes, Stack size 88 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawChineseString))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = VcanLCD_DrawChineseString &rArr; GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChar
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChineseString
</UL>

<P><STRONG><a name="[69]"></a>VcanLCD_DrawCircle</STRONG> (Thumb, 182 bytes, Stack size 44 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VcanLCD_DrawCircle &rArr; VcanLCD_DrawPointXY &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawPointXY
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>VcanLCD_DrawLine</STRONG> (Thumb, 536 bytes, Stack size 48 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VcanLCD_DrawLine &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawPenRectangle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>VcanLCD_DrawMuxString</STRONG> (Thumb, 714 bytes, Stack size 88 bytes, hzk16.o(i.VcanLCD_DrawMuxString))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = VcanLCD_DrawMuxString &rArr; GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChar
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowMuxString
</UL>

<P><STRONG><a name="[67]"></a>VcanLCD_DrawPenRectangle</STRONG> (Thumb, 158 bytes, Stack size 36 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawPenRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VcanLCD_DrawPenRectangle &rArr; VcanLCD_DrawLine &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawLine
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPointFromSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>VcanLCD_DrawPoint</STRONG> (Thumb, 298 bytes, Stack size 28 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VcanLCD_DrawPoint &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>VcanLCD_DrawPointXY</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawPointXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VcanLCD_DrawPointXY &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawCircle
</UL>

<P><STRONG><a name="[bd]"></a>VcanLCD_DrawRectangle</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VcanLCD_DrawRectangle &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawRectangleWithColor_t
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Clear
</UL>

<P><STRONG><a name="[68]"></a>VcanLCD_DrawRectangleWithColor_t</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawRectangleWithColor_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = VcanLCD_DrawRectangleWithColor_t &rArr; VcanLCD_DrawRectangle &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>VcanLCD_DrawString</STRONG> (Thumb, 88 bytes, Stack size 28 bytes, vcanlcdforstm32.o(i.VcanLCD_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VcanLCD_DrawString &rArr; VcanLCD_ShowChar &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowString
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowFloat
</UL>

<P><STRONG><a name="[bc]"></a>VcanLCD_GetSize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vcanlcdforstm32.o(i.VcanLCD_GetSize))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Clear
</UL>

<P><STRONG><a name="[c5]"></a>VcanLCD_GpioInit</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, vcanlcdforstm32.o(i.VcanLCD_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VcanLCD_GpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Init
</UL>

<P><STRONG><a name="[60]"></a>VcanLCD_Init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, vcanlcdforstm32.o(i.VcanLCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = VcanLCD_Init &rArr; VcanLCD_DrawRectangleWithColor_t &rArr; VcanLCD_DrawRectangle &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ResgisterInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_GpioInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawRectangleWithColor_t
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZeroPoint
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVcanLCDSize
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ColorInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>VcanLCD_Ptlon</STRONG> (Thumb, 1058 bytes, Stack size 20 bytes, vcanlcdforstm32.o(i.VcanLCD_Ptlon))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawMuxString
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChar
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawRectangle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawPointXY
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawPoint
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawLine
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawChineseString
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawBinaryImage
</UL>

<P><STRONG><a name="[c6]"></a>VcanLCD_ResgisterInit</STRONG> (Thumb, 5720 bytes, Stack size 8 bytes, vcanlcdforstm32.o(i.VcanLCD_ResgisterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VcanLCD_ResgisterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_SetShowDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Init
</UL>

<P><STRONG><a name="[ca]"></a>VcanLCD_SetShowDirection</STRONG> (Thumb, 3744 bytes, Stack size 0 bytes, vcanlcdforstm32.o(i.VcanLCD_SetShowDirection))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ResgisterInit
</UL>

<P><STRONG><a name="[c0]"></a>VcanLCD_ShowChar</STRONG> (Thumb, 592 bytes, Stack size 52 bytes, vcanlcdforstm32.o(i.VcanLCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VcanLCD_ShowChar &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawMuxString
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawString
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawChineseString
</UL>

<P><STRONG><a name="[8a]"></a>VcanLCD_ShowChineseString</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, vcanlcdforstm32.o(i.VcanLCD_ShowChineseString))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = VcanLCD_ShowChineseString &rArr; VcanLCD_DrawChineseString &rArr; GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawChineseString
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
</UL>

<P><STRONG><a name="[63]"></a>VcanLCD_ShowFloat</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, vcanlcdforstm32.o(i.VcanLCD_ShowFloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = VcanLCD_ShowFloat &rArr; VcanLCD_DrawString &rArr; VcanLCD_ShowChar &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawString
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>VcanLCD_ShowInt</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, vcanlcdforstm32.o(i.VcanLCD_ShowInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = VcanLCD_ShowInt &rArr; VcanLCD_DrawString &rArr; VcanLCD_ShowChar &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawString
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringAlignToLeft
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>VcanLCD_ShowMuxString</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, hzk16.o(i.VcanLCD_ShowMuxString))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = VcanLCD_ShowMuxString &rArr; VcanLCD_DrawMuxString &rArr; GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawMuxString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>VcanLCD_ShowString</STRONG> (Thumb, 84 bytes, Stack size 44 bytes, vcanlcdforstm32.o(i.VcanLCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VcanLCD_ShowString &rArr; VcanLCD_DrawString &rArr; VcanLCD_ShowChar &rArr; VcanLCD_Ptlon
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
</UL>

<P><STRONG><a name="[82]"></a>VcanLcdKeyInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vcanlcdkey.o(i.VcanLcdKeyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VcanLcdKeyInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[6b]"></a>VcanLcd_ShowBMP</STRONG> (Thumb, 684 bytes, Stack size 144 bytes, image_bmp.o(i.VcanLcd_ShowBMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = VcanLcd_ShowBMP &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showBmpInforHead
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showBmpHead
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_SetShowDirection
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_Ptlon
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_BeforeEvents
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vcanlcdforstm32.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[107]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[94]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowInt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowFloat
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToString
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloatToString
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CStringCatInt
</UL>

<P><STRONG><a name="[108]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[109]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[10a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a0]"></a>_read_buffer</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32f10x_microsd.o(i._read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _read_buffer &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadSingleBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadMultiBlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetCardInfo
</UL>

<P><STRONG><a name="[9f]"></a>_send_command</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f10x_microsd.o(i._send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteSingleBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteMultiBlock
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadSingleBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadMultiBlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetCardInfo
</UL>

<P><STRONG><a name="[a3]"></a>_send_command_hold</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f10x_microsd.o(i._send_command_hold))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _send_command_hold &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_read_write
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>

<P><STRONG><a name="[a2]"></a>_spi_read_write</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_microsd.o(i._spi_read_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command_hold
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_command
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_buffer
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteSingleBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteMultiBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadMultiBlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>

<P><STRONG><a name="[e8]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[81]"></a>delay_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>

<P><STRONG><a name="[c9]"></a>delay_ms</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ResgisterInit
</UL>

<P><STRONG><a name="[90]"></a>delay_us</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
</UL>

<P><STRONG><a name="[db]"></a>disk_initialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_initialize &rArr; MSD_Init &rArr; MSD_SPIHighSpeed &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
</UL>

<P><STRONG><a name="[eb]"></a>disk_ioctl</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disk_ioctl &rArr; MSD_GetCardInfo &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
</UL>

<P><STRONG><a name="[d8]"></a>disk_read</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = disk_read &rArr; MSD_ReadMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadSingleBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_ReadMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[da]"></a>disk_status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[ec]"></a>disk_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteSingleBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_WriteMultiBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[91]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = f_close &rArr; f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
</UL>

<P><STRONG><a name="[8b]"></a>f_lseek</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
</UL>

<P><STRONG><a name="[f4]"></a>f_mount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(i.f_mount))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
</UL>

<P><STRONG><a name="[89]"></a>f_open</STRONG> (Thumb, 360 bytes, Stack size 80 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
</UL>

<P><STRONG><a name="[8c]"></a>f_read</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGBKCodeFromSD
</UL>

<P><STRONG><a name="[ed]"></a>f_sync</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_sync &rArr; sync &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[f3]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(i.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initMicroSD
</UL>

<P><STRONG><a name="[dd]"></a>get_fat</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[f0]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[88]"></a>initMicroSD</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, badapple.o(i.initMicroSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = initMicroSD &rArr; VcanLCD_ShowChineseString &rArr; VcanLCD_DrawChineseString &rArr; GetGBKCodeFromSD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSD_SPI_Configuration
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLCD_ShowChineseString
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BadApple_Init
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = main &rArr; All_Init &rArr; TIM2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewSize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewPoint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;All_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[de]"></a>put_fat</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ae]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[af]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[d7]"></a>check_fs</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = check_fs &rArr; disk_read &rArr; MSD_ReadMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[e1]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[d9]"></a>chk_mounted</STRONG> (Thumb, 864 bytes, Stack size 72 bytes, ff.o(i.chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = chk_mounted &rArr; check_fs &rArr; disk_read &rArr; MSD_ReadMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[dc]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[df]"></a>create_name</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[e3]"></a>dir_find</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[e7]"></a>dir_next</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[e9]"></a>dir_register</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_register &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[e4]"></a>dir_sdi</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[ef]"></a>follow_path</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[e6]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(i.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[ea]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(i.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[e0]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(i.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[e5]"></a>move_window</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[f1]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[f2]"></a>sync</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ff.o(i.sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = sync &rArr; move_window &rArr; disk_write &rArr; MSD_WriteMultiBlock &rArr; _send_command &rArr; _spi_read_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[ee]"></a>validate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[cb]"></a>showBmpHead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, image_bmp.o(i.showBmpHead))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
</UL>

<P><STRONG><a name="[cc]"></a>showBmpInforHead</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, image_bmp.o(i.showBmpInforHead))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VcanLcd_ShowBMP
</UL>

<P><STRONG><a name="[cf]"></a>_fp_digits</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ce]"></a>_printf_core</STRONG> (Thumb, 1762 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[d2]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d1]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
